///------------------------------------
/// menu generated class
///------------------------------------
using System;
using Newtonsoft.Json;
using System.ComponentModel;
using System.Globalization;

public class $Name$TypeConverter : TypeConverter
{
    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
    {
        if (sourceType == typeof($Type$))
        {
            return true;
        }
        return base.CanConvertFrom(context, sourceType);
    }

    public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
    {
        if (value is $Type$ typedValue)
            return new $Name$(($Type$) typedValue);
        return base.ConvertFrom(context, culture, value);
    }

    public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
    {
        if (destinationType == typeof($Name$))
        {
            return new $Name$(($Type$)value);
        }
        return base.ConvertTo(context, culture, value, destinationType);
    }
}

public class $Name$Converter : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        var id = ($Name$)value;
        writer.WriteValue(id.Value);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        var value = ($Type$)reader.Value;
        return new $Name$(value);
    }

    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof($Name$);
    }
}

[TypeConverter(typeof($Name$TypeConverter))]
[JsonConverter(typeof($Name$Converter))]
public readonly struct $Name$ : IEquatable<$Name$>
{
    public readonly $Type$ Value;

    [JsonConstructor]
    public $Name$($Type$ value)
    {
        Value = value;
    }

    public static bool operator ==($Name$ a, $Name$ b)
    {
        return a.Equals(b);
    }

    public static bool operator !=($Name$ a, $Name$ b)
    {
        return !a.Equals(b);
    }

    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }

    public bool Equals($Name$ other)
    {
        return Value == other.Value;
    }

    public override bool Equals(object obj)
    {
        return obj is $Name$ other && Equals(other);
    }
    
    public override string ToString()
    {
        return Value.ToString();
    }
}
